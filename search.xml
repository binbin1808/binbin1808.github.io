<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿萨德</title>
      <link href="2020/12/23/%E9%98%BF%E8%90%A8%E5%BE%B7/"/>
      <url>2020/12/23/%E9%98%BF%E8%90%A8%E5%BE%B7/</url>
      
        <content type="html"><![CDATA[<p>其味无穷二群无全额请我恶趣味而且王企鹅 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一算法|LeetCode</title>
      <link href="2020/01/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AE%97%E6%B3%95-LeetCode/"/>
      <url>2020/01/02/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AE%97%E6%B3%95-LeetCode/</url>
      
        <content type="html"><![CDATA[<h1 id="今日起每日一算法题目"><a href="#今日起每日一算法题目" class="headerlink" title="今日起每日一算法题目"></a>今日起每日一算法题目</h1><hr><p>摸鱼一时爽一直摸鱼一直爽今天就来安利一道较为简单的算法题目（算法题目源自于LeetCode）</p><p>两数之和:<br>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/two-sum</span><br></pre></td></tr></table></figure><p>下面我们来说说解题思路吧<br>对于这样的问题有两种方法</p><h4 id="一、暴力法"><a href="#一、暴力法" class="headerlink" title="一、暴力法"></a>一、暴力法</h4><p>所谓的暴力法就是用两层循环嵌去遍历做对比，这里其实也可以优化一点先看看我的代码吧，这是一个考虑不周全的解法，这里进行了两次循环通过两数之和与target作比较找出合适的解，每次循环之中都会有重复的加法，由于进行了两次循环所以他的时间复杂度为O(n²)，空间复杂度为O(1)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var twoSum = function(nums, target) &#123;</span><br><span class="line">    for(var i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">        for(var j=0;j&lt;nums.length;j++)&#123;</span><br><span class="line">            if(i!==j&amp;&amp;nums[i]+nums[j]===target)&#123;</span><br><span class="line">                return [i,j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>社区给出的暴力解法，剔除了每次循环重复的加法，因此用时优于我的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var twoSum = function(nums, target) &#123;</span><br><span class="line">    for (var i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        var dif = target - nums[i];</span><br><span class="line">        // j = i + 1 的目的是减少重复计算和避免两个元素下标相同</span><br><span class="line">        for (var j = i + 1; j &lt; nums.length; j++) &#123;</span><br><span class="line">            if(nums[j] == dif)</span><br><span class="line">                return [i,j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="二、使用map"><a href="#二、使用map" class="headerlink" title="二、使用map"></a>二、使用map</h4><p>运用js的map此时只经历了一层循环因此时间复杂度为O(n)，空间复杂度也为O(n)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var twoSum = function(nums, target) &#123;</span><br><span class="line"> let arrs =new Map()</span><br><span class="line">    for(let i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">       if(arrs.has(target-nums[i]))&#123;</span><br><span class="line">          return[arrs.get(target-nums[i]),i] </span><br><span class="line">       &#125;</span><br><span class="line">        arrs.set(nums[i],i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记|基本概念</title>
      <link href="2019/12/31/js/"/>
      <url>2019/12/31/js/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="3-1数据类型"><a href="#3-1数据类型" class="headerlink" title="3.1数据类型"></a>3.1数据类型</h2><p>ECMAScript中有5中数据类型（也可以称之为基本数据类型）：Undefined，Null，Boolean，String，Number类型（ps：es6中新增了symbol类型），还有一种复杂类型数据Object,它的本质是由无序的名字组成，所有值最终都将是上述6中数据类型之一</p><a id="more"></a><hr><h3 id="ensp-ensp-3-1-1-typeof操作符"><a href="#ensp-ensp-3-1-1-typeof操作符" class="headerlink" title="&ensp; &ensp;3.1.1 typeof操作符"></a>&ensp; &ensp;3.1.1 typeof操作符</h3><p>typeof操作符是用来检测变量的数据类型，因此当你要判断实例是否为某个对象的实例时typeof无法满足要求此时应该用instanceof,返回值如下：<br>undefined——这个值未定义<br>boolean——这个值是个布尔值<br>number——这个值是个数字<br>string——这个值是个字符串<br>object——这个值是个对象或者null<br>function——这个值是个函数<br>ps：在es6中typeof还有一个返回值，即新增的symbol</p><h3 id="ensp-ensp-3-1-2-undefined"><a href="#ensp-ensp-3-1-2-undefined" class="headerlink" title="&ensp;&ensp; 3.1.2 undefined"></a>&ensp;&ensp; 3.1.2 undefined</h3><p> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;undefined类型只有一个值，在使用var声明变量时，变量没有被初始化则为undefined，同样使用typeof去检测不存在的变量时也会返回undefined而不是报错<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a</span><br><span class="line">console.log(a) //undefined</span><br><span class="line">console.log(b) //undefined(虽然此时变量没有被声明)</span><br></pre></td></tr></table></figure></p><h3 id="ensp-ensp-3-1-3-null类型"><a href="#ensp-ensp-3-1-3-null类型" class="headerlink" title="&ensp;&ensp; 3.1.3 null类型"></a>&ensp;&ensp; 3.1.3 null类型</h3><p> &ensp;&ensp;null类型和undefined一样都只有一个值，然而null特殊在从逻辑的角度来说它是一个空的对象指针因此用typeof检测null时会返回object,值得注意的是undefined是由null派生出来的因此undefined用”==”去和null比较时总是为true,如果用”===”去比较的话则为false,因为undefined派生自null在做”==”比较时进行了类型转换而”===”不仅仅是比较值<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=null</span><br><span class="line">console.log(typeof a)//object</span><br><span class="line">console.log(null==undefined)//true</span><br><span class="line">console.log(null===undefined)//false</span><br></pre></td></tr></table></figure></p><h3 id="ensp-ensp-3-1-4-Boolean类型"><a href="#ensp-ensp-3-1-4-Boolean类型" class="headerlink" title="&ensp;&ensp;3.1.4 Boolean类型"></a>&ensp;&ensp;3.1.4 Boolean类型</h3><p>&ensp;&ensp;Boolean类型只有两个字面值true和false,如果要将其他类型转化为Boolean值,只需要调用Boolean()</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=&apos;aaaa&apos;</span><br><span class="line">var b=Boolean(a)//true</span><br></pre></td></tr></table></figure><ul><li>String转Boolean:任何非空字符串会被转化为true,空字符串将会被转化为false</li><li>Number转Boolean:任何非0的值(包括无穷大)会被转化为true,0和NaN将会被转化为false</li><li>Object转Boolean: 任何对象都会被转化为true,null会被转化为false</li><li>Undefined转Boolean:undefined会被转化为false</li></ul><h3 id="ensp-ensp-3-1-5-Number类型"><a href="#ensp-ensp-3-1-5-Number类型" class="headerlink" title="&ensp;&ensp; 3.1.5 Number类型"></a>&ensp;&ensp; 3.1.5 Number类型</h3><p>&ensp;&ensp;&ensp;&ensp;Nunber类型使用了IEEE754格式来表示浮点数和整数(IEEE754:二进制浮点数算数标准)<br>最基本的格式为十进制整数，整数同样也可以通过8进制和16进制表示，八进制字面值第一位必须为零，八进制字符序列为(0-7),十六进制的字符序列为(0-9及A-F)字符部分大小</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=070 //转化为十进制为56</span><br><span class="line">var b=079 //无效的八进制数值会被解析为十进制的79</span><br><span class="line">var c=08 //无效的八进制数值会被解析为8</span><br><span class="line">var d=0xa //十六进制数值转化为十进制10</span><br><span class="line">var f=0x1f //转化为十进制31</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript BOM 详解</title>
      <link href="2019/12/30/JavaScript-BOM-%E5%85%83%E7%B4%A0/"/>
      <url>2019/12/30/JavaScript-BOM-%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>趁着摸鱼写点东西吧，为什么要写这个呢？还不是因为本来对于dom和bom这一块的理解甚是着急，甚至可以说是了解都不是特别多，曾经也在犀牛书和JavaScript高级程序设计上看过这些，但那时的我技术贼菜对于bom这块完全不感冒觉得卵用没有。</p><a id="more"></a><h2 id="1、Window对象"><a href="#1、Window对象" class="headerlink" title="1、Window对象"></a>1、Window对象</h2><p>所有浏览器都支持windows对象，它表示的是浏览器窗口，因此JavaScript全局对象、函数以及变量都自动成为windiw对象一员，window对象既是全局对象，也是全局对象。</p><hr><h3 id="1-1、Window尺寸"><a href="#1-1、Window尺寸" class="headerlink" title="1.1、Window尺寸"></a>1.1、Window尺寸</h3><p>对于IE、Chrome、Firefox、Opera以及safari</p><ul><li>window.innerHeight</li><li>window.innerWidth</li><li>window.outWidth 外部的宽度</li><li>window.outHeight 外部的高度</li></ul><h4 id="1-1-2、对于IE8、7、6、5"><a href="#1-1-2、对于IE8、7、6、5" class="headerlink" title="1.1.2、对于IE8、7、6、5"></a>1.1.2、对于IE8、7、6、5</h4><ul><li>document.documentclientWidth</li><li>document.documnetclientHeight</li><li>document.body.clientWidth</li><li>document.body.clientHeigh</li><li>document.body.clientTop</li><li>document.body.clientleft</li></ul><h5 id="小结clientWidth和clientHeight"><a href="#小结clientWidth和clientHeight" class="headerlink" title="小结clientWidth和clientHeight"></a>小结clientWidth和clientHeight</h5><ol><li>无padding无滚动： clientWidth = 盒子的width</li><li>有padding无滚动：clientWidth=盒子的width+padding*2</li><li>有padding有滚动：clientWidth=盒子的width+padding*2-滚动轴宽度</li></ol><p>clientTop和clientleft这两个是返回元素周围边框的厚度，如果不指定或不定位该元素它的值为0<br>clientTop=border-top<br>clientleft=border-left</p><h3 id="1-1-3、window-screen"><a href="#1-1-3、window-screen" class="headerlink" title="1.1.3、window.screen"></a>1.1.3、window.screen</h3><ul><li>window.screen.width</li><li>window.screen.height</li><li>window.screen.avaiHeight</li><li>window.screen.avaiWidth</li><li>window.screenTop</li><li>window.screenleft</li></ul><h4 id="1-1-4、offset相关"><a href="#1-1-4、offset相关" class="headerlink" title="1.1.4、offset相关"></a>1.1.4、offset相关</h4><ul><li>document.body.offsetWidth(元素的border+padding+content宽度)</li><li>document.body.offsetHeight(元素的border+padding+content高度)</li><li>document.offsetleft<br>该属性和其内部的内容是否超出元素大小无关，只和本来设定的border以及width和height有关</li></ul><ol><li>无padding无滚动无border：offsetWidth=clientWidth=盒子的宽度</li><li>有padding无滚动有border：盒子宽度+盒子padding<em>2+border</em>2=clientWidth+border*2</li><li>有padding有滚动有border：盒子宽度+盒子padding<em>2+border</em>2+scroll=clientWidth+border*2+scroll</li></ol><hr><h3 id="Window其他方法"><a href="#Window其他方法" class="headerlink" title="Window其他方法"></a>Window其他方法</h3><ul><li>window.open()-打开新窗口</li><li>window.ckose()-关闭当前窗口</li><li>window.moveeTo()-移动当前窗口</li><li>window.resizeTo()-调节当前窗口尺寸</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript原型链的理解</title>
      <link href="2019/12/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>2019/12/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">var person=new Person()</span><br><span class="line">person.name=&apos;Kevin&apos;</span><br><span class="line">console.log(person.name) //Kevin</span><br></pre></td></tr></table></figure><p>上面的例子当中，person就是一个构造函数，使用new创建了一个实例</p><a id="more"></a><h1 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h1><p>每个函数都有一个prototype属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name=&apos;Kevin&apos;</span><br><span class="line">var person1 =new Person()</span><br><span class="line">var person2 = new Person()</span><br><span class="line">console.log(person1.name)</span><br><span class="line">console.log(person2.name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初探webpack</title>
      <link href="2019/10/09/%E5%88%9D%E6%8E%A2webpack/"/>
      <url>2019/10/09/%E5%88%9D%E6%8E%A2webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack4-41-0"><a href="#webpack4-41-0" class="headerlink" title="webpack4.41.0"></a>webpack4.41.0</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>本质上，webpack是一个现代JavaScript应用程序的静态模块打包器(module bundler)。当webpack处理应用程序时，它会递归地构建一个依赖关系图(dependency graph),其中包含应用程序的每个模块,然后将所有这些模块打包成一个或多个bundler</p></blockquote><a id="more"></a><p>在webpack4.0以后的版本不需要我们在引用webpack的时候，引入配置文件。<br>在webpack核心的概念就是：</p><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>插件(plugins)</li></ul><p>未完待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6 Map与Set详解</title>
      <link href="2019/10/09/aaa/"/>
      <url>2019/10/09/aaa/</url>
      
        <content type="html"><![CDATA[<h2 id="Map与Set"><a href="#Map与Set" class="headerlink" title="Map与Set"></a>Map与Set</h2><h3 id="Map对象"><a href="#Map对象" class="headerlink" title="Map对象"></a>Map对象</h3><p>Map对象保存键值对。任何值都可以作为一个键或一个值。<br> <a id="more"></a> </p><h3 id="Maps-和Objects的区别"><a href="#Maps-和Objects的区别" class="headerlink" title="Maps 和Objects的区别"></a>Maps 和Objects的区别</h3><ul><li>一个Oject的键只能是字符串或者symbols，但是一个Maps的键可以是任意值</li><li>Map中的键值是有序的，但是添加到对象中的键不是</li><li>Map中的键值对的个数是可以从size获取的，而Object的键值对个数只能手动去计算。</li><li>Object都有自己的原型，原型链上的键名可能会和自己在对象上设置的键名产生冲突。</li></ul><h4 id="Map的使用"><a href="#Map的使用" class="headerlink" title="Map的使用"></a>Map的使用</h4> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let myMap=new Map()</span><br><span class="line">let keyString=&apos;a&apos;</span><br><span class="line">myMap.set(keyString,&apos;这是一个测试&apos;)  //这里的key值可以是任意值也可以是NaN</span><br><span class="line">myMap.get(a)  //此时得到的是&quot;这是一个测试&quot;</span><br></pre></td></tr></table></figure><h5 id="Map-prototype-has"><a href="#Map-prototype-has" class="headerlink" title="Map.prototype.has()"></a>Map.prototype.has()</h5><blockquote><p>myMap.has(key)</p></blockquote><blockquote><p>返回一个bool值用来表明map中是否存在指定的元素</p></blockquote><h5 id="Map-prototype-clear"><a href="#Map-prototype-clear" class="headerlink" title="Map.prototype.clear()"></a>Map.prototype.clear()</h5><blockquote><p>myMap.clear()</p></blockquote><blockquote><p>清除map中所有成员没有参数和返回值</p></blockquote><h5 id="Map-prototype-delete"><a href="#Map-prototype-delete" class="headerlink" title="Map.prototype.delete()"></a>Map.prototype.delete()</h5><blockquote><p>myMap.delete(key)</p></blockquote><blockquote><p>移除map对象中的某个元素，返回值为布尔值</p></blockquote><h5 id="Map-prototype-keys"><a href="#Map-prototype-keys" class="headerlink" title="Map.prototype.keys()"></a>Map.prototype.keys()</h5><blockquote><p>myMap.keys()</p></blockquote><blockquote><p>返回键名的遍历器</p></blockquote><h5 id="Map-prototype-values"><a href="#Map-prototype-values" class="headerlink" title="Map.prototype.values()"></a>Map.prototype.values()</h5><blockquote><p>myMap.values()</p></blockquote><blockquote><p>返回值的遍历器</p></blockquote><h5 id="Map-prototype-entries"><a href="#Map-prototype-entries" class="headerlink" title="Map.prototype.entries"></a>Map.prototype.entries</h5><blockquote><p>myMap.entries()</p></blockquote><blockquote><p>返回所有成员的遍历器</p></blockquote><h4 id="Map的迭代"><a href="#Map的迭代" class="headerlink" title="Map的迭代"></a>Map的迭代</h4><p> 对Map进行遍历的方法有很多，但是优先级比较高的还是for…of和for Each<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let myMap =new Map();</span><br><span class="line">myMap.set(test,0);</span><br><span class="line">myMap.set(test1,1)</span><br><span class="line">for(let [key,value] of myMap) &#123;</span><br><span class="line">console.log(key +value)</span><br><span class="line">&#125;</span><br><span class="line">myMap.forEach(function(value,key,myMap)&#123;</span><br><span class="line">console.log(key,value)</span><br><span class="line">&#125;,myMap1) //回调函数的默认参数为value、key、myMap,而myMap1为这个回调函数this的指向，如果没有这个参数则回调函数的this为undefined</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
